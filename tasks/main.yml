---
- name: insall dependencies
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
    - gnupg-curl

- name: install gnupg-curl
  apt:
    name: gnupg-curl
  when: ansible_distribution_version is version('18.04', '<')

- name: add docker repository key
  apt_key:
    id: "{{ docker_apt_key_sig }}"
    keyserver: "{{ docker_apt_key_url }}"
    state: present

- name: add docker repo
  apt_repository:
    repo: "{{ docker_apt_repo }}"
    update_cache: true
    state: present

- name: install docker package
  apt:
    name: "{{ docker_package_name }}{% if (docker_package_version|length > 0) and (docker_package_version != 'latest') %}={{ docker_package_version }}{% endif %}"
    state: "{{ 'latest' if docker_package_version == 'latest' else 'present' }}"

- name: create docker config directory
  file:
    path: /etc/docker
    state: directory

- name: set docker daemon options
  copy:
    content: "{{ docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0640
  notify:
    - restart docker

- name: install pip
  package:
    name: python-pip
    state: present
  when: docker_py_install_method == 'pip'

- name: pip install docker-py
  pip:
    name: docker-py
    version: "{{ docker_py_version if (docker_py_version and docker_py_version != 'latest') else omit }}"
    state: "{{ 'latest' if docker_py_version == 'latest' else 'present' }}"
  when: docker_py_install_method == 'pip'

- name: install docker-py (package)
  apt:
    name: python-docker{% if docker_py_version not in ['', 'latest'] %}={{ docker_py_version }}{% endif %}
    state: "{{ 'latest' if docker_py_version == 'latest' else 'present' }}"
  when: docker_py_install_method == 'package'
